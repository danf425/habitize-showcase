Wite-Host "Adding DSN"
Import-Module Wdac -SkipEditionCheck -verbose
  $dsn_data = (Get-Content {{pkg.svc_config_install_path}}\dsn.json | ConvertFrom-Json)
  #Add-OdbcDsn -Name $dsn_data.SQLServer.Name -DriverName $dsn_data.SQLServer.Driver -DsnType "User" -Platform "64-bit" -SetPropertyValue @("Server=$($dsn_data.SQLServer.Server)", "Database=$($dsn_data.SQLServer.DefaultDb)", "Trusted_Connection=Yes",  "Description=$($dsn_data.SQLServer.Description)") -PassThru
    ForEach ($dsn in $dsn_data.PsObject.Properties.value){
        if (-NOT (get-odbcdsn -name $dsn.Name)){
            If ($dsn.Authentication -eq "Windows NT"){
                Add-OdbcDsn -Name $dsn.Name -DriverName $dsn.Driver -DsnType "User" -Platform "64-bit" -SetPropertyValue @("Server=$($dsn.Server)", "Database=$($dsn.DefaultDb)", "Trusted_Connection=Yes",  "Description=$($dsn.Description)") -PassThru
            } ElseIf ($dsn.Authentication -eq "SQL Server"){
            If ($dsn.Driver -eq "IBM i Access ODBC Driver"){
                    Add-OdbcDsn -Name $dsn.Name -DriverName $dsn.Driver -DsnType "User" -Platform "64-bit" -SetPropertyValue @("System=$($dsn.Server)", "Database=$($dsn.DefaultDb)", "Trusted_Connection=No",  "Description=$($dsn.Description)") -PassThru
            } Else{
                    Add-OdbcDsn -Name $dsn.Name -DriverName $dsn.Driver -DsnType "User" -Platform "64-bit" -SetPropertyValue @("Server=$($dsn.Server)", "Database=$($dsn.DefaultDb)", "Trusted_Connection=No",  "Description=$($dsn.Description)") -PassThru
                }
            }
        } else {
            If ($dsn.Authentication -eq "Windows NT"){
                Set-OdbcDsn -Name $dsn.Name -DriverName $dsn.Driver -DsnType "User" -Platform "64-bit" -SetPropertyValue @("Server=$($dsn.Server)", "Database=$($dsn.DefaultDb)", "Trusted_Connection=Yes",  "Description=$($dsn.Description)") -PassThru
            } ElseIf ($dsn.Authentication -eq "SQL Server"){
            If ($dsn.Driver -eq "IBM i Access ODBC Driver"){
                    Set-OdbcDsn -Name $dsn.Name -DriverName $dsn.Driver -DsnType "User" -Platform "64-bit" -SetPropertyValue @("System=$($dsn.Server)", "Database=$($dsn.DefaultDb)", "Trusted_Connection=No",  "Description=$($dsn.Description)") -PassThru
            } Else{
                    Set-OdbcDsn -Name $dsn.Name -DriverName $dsn.Driver -DsnType "User" -Platform "64-bit" -SetPropertyValue @("Server=$($dsn.Server)", "Database=$($dsn.DefaultDb)", "Trusted_Connection=No",  "Description=$($dsn.Description)") -PassThru
                }
            }
        }
    }
Write-Host "DSN have been added"



Write-Host "Turning off security warnings for installation files"
Unblock-File -Path "{{pkg.path}}\IBM ShowCase {{pkg.version}}\Client\setup.exe"

Write-Host "Installing Showcase"
Write-Host "Set Flag"

$flag=1
#took out -NoNewWindow
Start-Process "{{pkg.path}}\IBM ShowCase {{pkg.version}}\Client\setup.exe"  -ArgumentList "/s /f1""{{pkg.svc_config_install_path}}\showcasesetup.iss"""

while ($flag -eq 1){
  write-host "...I'm Doing Things..."
  if(get-process -name "WerFault" -erroraction 'silentlycontinue'){
    write-host "...Kill and Restart..."
    Start-Sleep -Seconds 10
    write-host "The pop up w/ the error should pop up... maybe"
    $proc | kill
  	stop-process -name "WerFault"
    Start-Sleep -Seconds 10
    write-host "Flag is Off"
    $flag=0
    Start-Process "{{pkg.path}}\IBM ShowCase {{pkg.version}}\Client\setup.exe" -Wait -NoNewWindow -ArgumentList "/s /f1""{{pkg.svc_config_install_path}}\showcasesetup.iss"""
  }
}

write-host "Dept_compat_key happens here. Are we even reaching this?"
$dep_compat_key = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers"

if (-Not (Test-Path $dep_compat_key)) {
  try {
    Write-Host "Creating $dep_compat_key registry key"
    New-Item -Path $dep_compat_key -Force | Out-Null
    New-ItemProperty -Path $dep_compat_key -Name "(Default)" -Value $"(value not set)" -PropertyType String -Force | Out-Null
    Write-Host "Created $dep_compat_key registry key"
  }
  catch {
    Write-Host "Unable to create $dep_compat_key"
    Break
  }
}

try {
  Write-Host "Setting DEP & compatibility mode keys and configuring for vista apps ..."
  Set-ItemProperty -Path $dep_compat_key -Name "C:\Program Files (x86)\IBM\ShowCase\9\bin\vistapro.exe" -Value "DisableNXShowUI WINXPSP3" -Force
  Set-ItemProperty -Path $dep_compat_key -Name "C:\Program Files (x86)\IBM\ShowCase\9\bin\vista.exe" -Value "DisableNXShowUI WINXPSP3" -Force
  Write-Host "Set DEP & compatibility mode keys and configured for vista apps."
}
catch {
  Write-Host "Unable to set keys or configure DEP or compatibility mode for vista apps."
  Break
}

try {
  Write-Host "Setting correct short-date pattern"
  Set-ItemProperty -Path "Microsoft.PowerShell.Core\Registry::HKEY_USERS\.DEFAULT\Control Panel\International" -Name "sShortDate" -Value "yyyy-MM-dd"
  Write-Host "Set correct short-date pattern"
}
catch {
  Write-Host "Unable to set required short-date pattern"
}